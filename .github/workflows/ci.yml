---
name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-on-${{ github.event_name }}-from-${{ github.ref_name }}
  cancel-in-progress: true

jobs:

  build-cpu-gcc11:
    runs-on: ubuntu-latest
    name: CPU (gcc 11)
    steps:
      - name: Checkout stdexec
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Build and test CPU schedulers
        uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:gcc11-ubuntu20.04
        with:
          cc: gcc-11
          checks: build test
          prebuild_command: |
            apt update && apt install -y --no-install-recommends git;

  build-cpu-clang12:
    runs-on: ubuntu-latest
    name: CPU (clang 12)
    steps:
      - name: Checkout stdexec
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Build and test CPU schedulers
        uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:clang12-ubuntu20.04
        with:
          cc: clang-12
          checks: build test
          cxxflags: "-stdlib=libc++"
          prebuild_command: |
            apt update && apt install -y --no-install-recommends git;

  build-gpu:
    name: GPU (${{ matrix.name }}, CUDA ${{ matrix.cuda }})
    strategy:
      fail-fast: false
      matrix:
        gpu: ["v100"]
        driver: ["520"]
        arch: ["amd64"]
        cuda: ["11.8"]
        cxx: ["mpic++"]
        name: ["nvc++ 22.11"]
        tag: ["nvhpc22.11"]
        include:
          - { gpu: "v100", name: "clang 16", cuda: "11.8", cxx: "clang++", cxxflags: "-stdlib=libc++", tag: "llvmdev-cuda11.8" }
          - { gpu: "v100", name: "clang 16", cuda: "12.0", cxx: "clang++", cxxflags: "-stdlib=libc++", tag: "llvmdev-cuda12.0" }

    runs-on:
      - self-hosted
      - linux
      - gpu-${{ matrix.gpu }}-${{ matrix.driver }}-1
      - ${{ matrix.arch }}
    container:
      options: -u coder
      image: docker.io/pauletaylor/devcontainers:cmake-ninja-sccache-${{ matrix.tag }}
      env:
        CUDA_VERSION: ${{ matrix.cuda }}
        # CMAKE_CXX_COMPILER_LAUNCHER: /usr/bin/sccache
        # CMAKE_CUDA_COMPILER_LAUNCHER: /usr/bin/sccache
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
    steps:
      - name: Run nvidia-smi to make sure GPU is working
        run: nvidia-smi
      - name: Checkout stdexec
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Build and test GPU schedulers
        shell: bash
        env:
          cxx: "${{ matrix.cxx }}"
          cxxflags: "${{ matrix.cxxflags }}"
          GH_TOKEN: "${{ github.token }}"
        run: |
          source $BASH_ENV;

          gh_scopes="$(GITHUB_TOKEN=                \
              gh api -i -X GET --silent rate_limit  \
              2>/dev/null                           \
            | grep -i 'x-oauth-scopes:'             \
          )";

          echo "GH_TOKEN scopes: '$gh_scopes'";

          set -x;

          sudo mkdir -p /workspaces/stdexec/;
          sudo cp -ar . /workspaces/stdexec/;
          sudo chown -R $(id -u):$(id -g) /workspaces;
          cd /workspaces/stdexec;

          # Configure
          cmake -S . -B build -GNinja \
            -DSTDEXEC_ENABLE_CUDA=ON \
            -DCMAKE_CXX_COMPILER="$cxx" \
            -DCMAKE_CUDA_COMPILER="$cxx" \
            -DCMAKE_CXX_FLAGS="$cxxflags" \
            -DCMAKE_CUDA_ARCHITECTURES=native;

          # Compile
          cmake --build build;

          # Tests
          ctest --test-dir build --verbose --output-on-failure;

          # Examples
          ./build/examples/nvexec/maxwell_cpu_st --iterations=1000 --N=512 --run-cpp --run-inline-scheduler
          ./build/examples/nvexec/maxwell_cpu_mt --iterations=1000 --N=512 --run-std --run-stdpar
          ./build/examples/nvexec/maxwell_gpu_s --iterations=1000 --N=512 --run-cuda --run-stdpar --run-stream-scheduler

#  build-clang-13:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:clang13
#        with:
#          cc: clang-13
#          checks: build test
#          cxxflags: -stdlib=libc++
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;

#  static-checks:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:main
#        with:
#          cc: clang-13
#          checks: cppcheck clang-tidy
#          clangtidyflags: '-quiet'
#          cppcheckflags: '--enable=warning,style,performance,portability --inline-suppr'
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;

#  clang-format:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:main
#        with:
#          checks: clang-format
#          clangformatdirs: src test
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;

#  sanitizer:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:main
#        with:
#          checks: sanitize=address sanitize=undefined
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;
