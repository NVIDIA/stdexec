---
name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-on-${{ github.event_name }}-from-${{ github.ref_name }}
  cancel-in-progress: true

jobs:

  build-cpu-gcc11:
    runs-on: ubuntu-latest
    name: CPU (gcc 11)
    steps:
      - name: Checkout stdexec
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Build and test CPU schedulers
        uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:gcc11-ubuntu20.04
        with:
          cc: gcc-11
          checks: build test
          prebuild_command: |
            apt update && apt install -y --no-install-recommends git;

  build-cpu-clang12:
    runs-on: ubuntu-latest
    name: CPU (clang 12)
    steps:
      - name: Checkout stdexec
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Build and test CPU schedulers
        uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:clang12-ubuntu20.04
        with:
          cc: clang-12
          checks: build test
          cxxflags: "-stdlib=libc++"
          prebuild_command: |
            apt update && apt install -y --no-install-recommends git;

  build-gpu:
    name: GPU (${{ matrix.name }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - { name: "clang 16, CUDA 11.8",    cxx: "clang++", cxxflags: "-stdlib=libc++", tag: "llvmdev-cuda11.8", gpu: "v100", driver: "495", arch: "amd64" }
        # - { name: "clang 16, CUDA 12.0",    cxx: "clang++", cxxflags: "-stdlib=libc++", tag: "llvmdev-cuda12.0", gpu: "v100", driver: "495", arch: "amd64" }
          - { name: "nvc++ 22.11, CUDA 11.8", cxx: "mpic++",  cxxflags: ""              , tag: "nvhpc22.11",       gpu: "v100", driver: "495", arch: "amd64" }

    runs-on:
      - self-hosted
      - linux
      - gpu-${{ matrix.gpu }}-${{ matrix.driver }}-1
      - ${{ matrix.arch }}
    container:
      image: docker.io/pauletaylor/devcontainers:cmake-ninja-sccache-${{ matrix.tag }}
      options: -u coder
      env:
        # CMAKE_CXX_COMPILER_LAUNCHER: /usr/bin/sccache
        # CMAKE_CUDA_COMPILER_LAUNCHER: /usr/bin/sccache
        NVIDIA_DRIVER_CAPABILITIES: all
        NVIDIA_VISIBLE_DEVICES: ${{ env.NVIDIA_VISIBLE_DEVICES }}
    steps:
      - name: Run nvidia-smi to make sure GPU is working
        run: nvidia-smi
      - name: Checkout stdexec
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Build and test GPU schedulers
        shell: /bin/bash -e -l {0}
        env:
          CUDA_VISIBLE_DEVICES: all
          NVIDIA_VISIBLE_DEVICES: all
          NVIDIA_DRIVER_CAPABILITIES: all
        run: |
          source $BASH_ENV;

          sudo mkdir -p /workspaces/stdexec;
          sudo cp -ar . /workspaces/stdexec;
          cd /workspaces/stdexec/;

          cmake -S . -B build \
            --trace \
            -GNinja \
            -DSTDEXEC_ENABLE_CUDA=ON \
            -DCMAKE_CUDA_ARCHITECTURES=native \
            -DCMAKE_CXX_FLAGS="${{ matrix.cxxflags }}" \
            -DCMAKE_CXX_COMPILER=$(which ${{ matrix.cxx }}) \
            -DCMAKE_CUDA_COMPILER=$(which ${{ matrix.cxx }});

          cmake --build build;

          ctest \
            --verbose \
            --test-dir build \
            --output-on-failure \
            --force-new-ctest-process;

#  build-clang-13:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:clang13
#        with:
#          cc: clang-13
#          checks: build test
#          cxxflags: -stdlib=libc++
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;

#  static-checks:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:main
#        with:
#          cc: clang-13
#          checks: cppcheck clang-tidy
#          clangtidyflags: '-quiet'
#          cppcheckflags: '--enable=warning,style,performance,portability --inline-suppr'
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;

#  clang-format:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:main
#        with:
#          checks: clang-format
#          clangformatdirs: src test
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;

#  sanitizer:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@master
#      - uses: docker://ghcr.io/trxcllnt/action-cxx-toolkit:main
#        with:
#          checks: sanitize=address sanitize=undefined
#          prebuild_command: |
#            apt update && apt install -y --no-install-recommends git;
