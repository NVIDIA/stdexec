# https://clangd.llvm.org/config

# Apply a config conditionally to all C++ files except those in the
# include/execpools directory which need platform-dependent headers
If:
  PathMatch: .*\.(c|h)pp$
  PathExclude: .*/execpools/.*

---

# Apply a config conditionally to all CUDA files
If:
  PathMatch: .*\.cuh?$
  PathExclude: examples/nvexec/.*
CompileFlags:
  Add:
    # Allow variadic CUDA functions
    - "-Xclang=-fcuda-allow-variadic-functions"

---

# The following file assumes a define.
If:
  PathMatch: .*/__system_context_default_impl_entry\.hpp
CompileFlags:
  Add:
    - "-DSTDEXEC_SYSTEM_CONTEXT_INLINE=inline"

---

# Use clang++ in CUDA mode to provide intellisense for files with `nvexec` in their path
If:
  PathMatch: [include/nvexec/.*, test/nvexec/.*]
CompileFlags:
  Compiler: clang++
  Add:
    - "-x"
    - "cuda"
    - "-std=gnu++20"
    - "-Wno-unknown-cuda-version"
    - "--cuda-host-only"

---

# Tweak the clangd parse settings for all files
CompileFlags:
  CompilationDatabase: .
  Add:
    - "-DLIBCUDACXX_ENABLE_EXPERIMENTAL_MEMORY_RESOURCE"
    # report all errors
    - "-ferror-limit=0"
    - "-fmacro-backtrace-limit=0"
    - "-ftemplate-backtrace-limit=0"
    - "-std=gnu++20"
    - "-DSTDEXEC_CLANGD_INVOKED"
  Remove:
    - "-stdpar*"
    # strip CUDA fatbin args
    - "-Xfatbin*"
    - "-gpu=*"
    - "--diag_suppress*"
    # strip CUDA arch flags
    - "-gencode*"
    - "--generate-code*"
    # strip gcc's -fcoroutines
    - -fcoroutines
    # strip nvc++ flags unknown to clang
    - "-ftemplate-backtrace-limit"
    # strip CUDA flags unknown to clang
    - "-ccbin*"
    - "--compiler-options*"
    - "--expt-extended-lambda"
    - "--expt-relaxed-constexpr"
    - "-forward-unknown-to-host-compiler"
    - "-Werror=cross-execution-space-call"
    - "-e1000"
Diagnostics:
  Suppress:
    - "variadic_device_fn"
    - "attributes_not_allowed"
    # The NVHPC version of _NVCXX_EXPAND_PACK macro triggers this clang error.
    # Temporarily suppressing it, but should probably fix
    - "template_param_shadow"
    - "pp_expr_bad_token_binop" # erroneous error from STDEXEC_ENABLE_EXTRA_TYPE_CHECKING()
    - "#warnings"
